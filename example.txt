#!/usr/bin/env node
import WebSocket from "ws";

// The Brave MCP endpoint (WebSocket transport)
const MCP_URL = "wss://mcp.brave.com/ws";

function connect() {
  return new Promise((resolve, reject) => {
    const ws = new WebSocket(MCP_URL);

    ws.on("open", () => {
      console.log("[✅] Connected to Brave Search MCP");
      resolve(ws);
    });

    ws.on("error", (err) => {
      reject(new Error("Connection failed: " + err.message));
    });
  });
}

async function main() {
  const ws = await connect();

  // The MCP handshake — minimal example
  const handshake = {
    type: "handshake",
    protocol: "model-context-protocol/1.0",
    client: "test-client",
  };

  ws.send(JSON.stringify(handshake));
  console.log("[→] Sent handshake:", handshake);

  // Wait for server handshake
  ws.once("message", (data) => {
    console.log("[←] Received handshake response:", data.toString());

    // Send a test search request
    const request = {
      id: "test-1",
      type: "request",
      method: "search",
      params: { query: "site:brave.com MCP protocol" },
    };

    ws.send(JSON.stringify(request));
    console.log("[→] Sent search request:", request);
  });

  ws.on("message", (data) => {
    try {
      const msg = JSON.parse(data.toString());
      if (msg.id === "test-1") {
        console.log("[✅] Got search response:", JSON.stringify(msg, null, 2));
        ws.close();
      }
    } catch (err) {
      console.error("Error parsing message:", err);
    }
  });
}

main().catch((e) => {
  console.error("[❌] MCP test failed:", e);
  process.exit(1);
});
